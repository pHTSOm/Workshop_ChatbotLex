[{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/2-prerequisite/2.1-cloneweb/","title":"Clone website","tags":[],"description":"","content":"In this step, we will proceed to clone a website which we will use to connect with the chatbot.\nCopy this https://github.com/pHTSOm/workshop_website_frontend.git Go to Visual Studio code At the navigation bar choose Source Control Click Clone Repository Then paste the link we just copy. Press Enter. We can run it with npm install then npm start. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/3.1-create-a-knowledge-base/","title":"Create a knowledge base","tags":[],"description":"","content":" Go to Amazon Bedrock console Click on Knowledge Bases. Click Create and choose Knowledge base with vector store. In the Provide knowledge base detail step: We will name the knowledge base e.g: KnowledgeBaseforChatbotLex Choose Create and use a new service role Keep other as default and go to the next step. In the Configure data source step: At the S3 URI section, choose browse S3. Choose the bucket we created previously. Click Next In the Configure data storage and processing step: Click on Select model In Category, choose Amazon then Titan Embedding G1 - Text V1.2 Click Apply Select Amazon Opensearch Serverless for Vector store type. Review all the knowledge base\u0026rsquo;s information carefully then create the knowledge base After successfully create the knowledge base we need to sync the data source to the knowledge base. Tick the knowledge base then click Sync. All we need to do next is create the chatbot. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/","title":"Create chatbot Lex with knowledge base using Amazon Bedrock","tags":[],"description":"","content":"Create a chatbot Lex with knowledge base from Amazon Bedrock for website Overall In this workshop, you\u0026rsquo;ll create a self-service digital assistant with Amazon Lex and Amazon Bedrock Knowledge Base.\nContent Introduction Preparation Create chatbot Clean up resources "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/2-prerequisite/2.3-createidentitypool/2.3.1-createidentitypool/","title":"Create Identity Pool","tags":[],"description":"","content":"Create Identity Pool Go to Amazon Cognito service management console Click Identity Pool. Click Create Identity Pool. At the Create identity pool page. In the Configure Identity Pool Trust step, we will enable Guest Access. This lets anonymous visitors interact with the chatbot without logging in or providing AWS credentials. Guest access provides temporary credentials through Amazon Cognitoâ€™s unauthenticated identities, allowing secure use of Lex without exposing sensitive resources or requiring sign-in. Click Next In the Configure permissions step, we will choose create a new IAM role then name it RoleCognitoforChatbotLex. In the Configure properties step, we will give the identity pool a name e.g LexFrontendGuestPool. Finally we will review the information again then create the identity pool "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/3.2-create-chatbot/3.2.2-createintentforchatbot/3.2.2.1-createintentmanually/","title":"Create Intent manually","tags":[],"description":"","content":"Create Intent manually Go to Amazon Lex service management console Click on the bot we just created. Click Intents. Click Add Intent. Choose Add empty intent. We will name the intent as WelcomeIntent. At the Sample utterances section. We can enter some sample query that fix the context of the intent, for example: hi, hello, ola,\u0026hellip; At the Initial response section. We can provide messages that acknowledge the user\u0026rsquo;s first request. We can configure the bot to wait for the next input by setting in Advance Options. In Advance Options, Click Set values then choose Wait for users input Choose Save Intent We can now build and test the bot "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/3.2-create-chatbot/3.2.1-createlexchatbot/","title":"Create Lex chatbot","tags":[],"description":"","content":"Using Amazon Lex to create chatbot Go to Amazon Lex service management console Click Create bot. At the Configure bot settings page. Click to select Create a blank bot. Give the bot a name e.g: Shopbot Click to select Create a role with Amazon Lex permissions. We can keep the other setting at default. Click Next At the Add languages page. We can choose language and the voice interaction we prefer but in my case I choose English for language and default setting for other options. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/1-introduce/","title":"Introduction","tags":[],"description":"","content":"Amazon Lex offers powerful conversational interfaces using voice and text channels. It has natural language understanding characteristics that allow it to comprehend and fulfill user intent more accurately and quickly.\nAmazon Bedrock makes it easier to build and scale generative AI systems using large language models (LLMs) and other foundation models (FMs). It provides access to a varied set of foundation models from top vendors including Anthropic Claude, AI21 Labs, Cohere, and Stability AI, as well as Amazon\u0026rsquo;s own Amazon Titan models. Furthermore, Amazon Bedrock Knowledge Bases enables you to create applications that take advantage of Retrieval Augmented Generation (RAG), a technique in which retrieving relevant information from data sources improves the model\u0026rsquo;s ability to generate contextually appropriate and informed responses.\nThe solution uses Amazon Lex, Amazon Simple Storage Service (Amazon S3), and Amazon Bedrock in the following steps:\nUsers communicate with the chatbot via a pre-built Amazon Lex web interface. Amazon Lex processes each user request in order to detect user intent using an algorithm known as intent recognition. Amazon Lex has the built-in generative AI tool QnAIntent, which can be linked directly to a knowledge base to fulfill user requests. Centralized management of users using AWS IAM. Access to the server easily and simply with one click. Faster access time than traditional methods like SSH Support many different operating systems such as Linux, Windows, MacOS Log the connection sessions and commands executed while connecting to the server. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/2-prerequisite/","title":"Preparation ","tags":[],"description":"","content":"To connect the Lex chatbot with our website, we will first construct an identity pool and apply the relevant IAM policy to its role, allowing for safe communication with the chatbot. Next, we\u0026rsquo;ll seek access to the foundation model employed by the Amazon Bedrock knowledge base. Finally, we will upload an imitation policy file to Amazon S3 to act as a knowledge source for the knowledge base that powers the chatbot that operates on our store\u0026rsquo;s website.\nContent Preparing Identity pool and clone website Request necessary model for Amazon Bedrock knowledge base "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/2-prerequisite/2.3-createidentitypool/2.3.2-attachpolicy/","title":"Attach Policy to Role","tags":[],"description":"","content":"Attach Policy to Identity Pool\u0026rsquo;s role Go to IAM management console. Click Roles. Find the Identity Pool\u0026rsquo;s role we just created and click it, for me in this case is RoleCognitoforChatbotLex. Scroll down and find the Permissions tag. Click Add permissions. Choose Create inline policy. Copy this policy to Policy editor and save it. {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;Statement1\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;lex:StartConversation\u0026#34;,\r\u0026#34;lex:RecognizeText\u0026#34;,\r\u0026#34;lex:RecognizeUtterance\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: [\r\u0026#34;*\u0026#34;\r]\r},\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;Statement2\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\u0026#34;cognito-identity:GetCredentialsForIdentity\u0026#34;],\r\u0026#34;Resource\u0026#34;: [\u0026#34;*\u0026#34;]\r}\r]\r} We have successfully attach new policy to role. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/3.2-create-chatbot/3.2.2-createintentforchatbot/3.2.2.2-createbuiltin-intent/","title":"Create Built-in intent","tags":[],"description":"","content":"Create Built-in intent Go to Amazon Lex service management console Click on the bot we just created. Click Intents. Click Add Intent. Choose Use built-in intent. Choose QnAbotIntent In the intent configuration page, scroll down to QnA configuration Choose Anthropic and Claude V2 At the Choose a knowledge store, Choose Knowledge base for Amazon bedrock Fill in the knowledge base\u0026rsquo;s ID we have created before. Click Save Intent Now we can build and test the bot. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/3.2-create-chatbot/3.2.2-createintentforchatbot/","title":"Create Intent for chatbot","tags":[],"description":"","content":"Create Intent for chatbot We will create intent by configuring intent manually and using built-in intent with knowledge base we have created.\nContent: Create Intent manually Create Built-in intent with knowledge base Publish and connect the chatbot "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/2-prerequisite/2.2-requestmodel/","title":"Request Necessary Model for Amazon Bedrock","tags":[],"description":"","content":"Request model Titan Embedding G1 - Text is available for us-east-1 region and us-west-2 region. Remember to change to these region before start.\nIn this step, we will proceed to request access to some models we will use for Amazon Bedrock knowledge base\nGo to Amazon Bedrock console In the left navigation bar, click Model Access. Point the cursor to Available to request then click Request model access. In the Edit model access page tick the box of these models: Titan Embeddings G1 - Text. Claude Click Next\nClick Submit\nWait a few second we will get access to the model.\n"},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/3.2-create-chatbot/","title":"Create and publish chatbot","tags":[],"description":"","content":"In this step we will focus in create the chatbot with Amazon Lex then publish it so that we can connect the chatbot to our website.\nContent: Create the chatbot Create Intent for chatbot Publish and connect chatbot to website "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/","title":"Build the chatbot","tags":[],"description":"","content":"In the following section, we will learn how to build a chatbot with Amazon Lex. Chatbots are useful in improving user interactions. We\u0026rsquo;ll explore how Amazon Lex uses a knowledge base in Amazon Bedrock to offer more accurate replies. When a user poses a query, Amazon Titan embeddings transform it into a vector. This enables the system to extract relevant information from the knowledge base. The added context allows the chatbot to provide more accurate replies. In the following sections, we will look at how to create an effective chatbot that understands user questions and uses a strong knowledge base to improve conversations.\nContent 3.1. Create a knowledge base 3.2. Create chatbot\n"},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/2-prerequisite/2.3-createidentitypool/","title":"Preparing Identity pool and clone website","tags":[],"description":"","content":"In this step, we will need to create an identity pool. Then attach policy in order to connnect with Amazon Lex.\nContent Create Identity Pool in Amazon Cognito Attach necessary to Identity Pool\u0026rsquo;s Role "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/3-createchatbot/3.2-create-chatbot/3.2.2-createintentforchatbot/3.2.2.3-publishandconnect/","title":"Publish and connect chatbot to website","tags":[],"description":"","content":"Publish and connect the chatbot Go to Amazon Lex service management console Click on the bot we just created.\nClick Versions.\nClick Create Version. Scroll down and click Create.\nAt the left navigation bar click Aliases. Click Create Alias. Name the alias and save it. Save the alias ID and the bot ID Open the website folder on visual studio code: Open the \u0026ldquo;public\u0026rdquo; folder Open \u0026ldquo;chatbot.html\u0026rdquo; file Fill in your poolID, botname, region, bot_ID, bot_alias_ID, and the bot_localeID (which is en_US in this case). After fill in all the information to chatbotconfig correctly we can run the app with npm start "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/2-prerequisite/2.4-uploadamockpolicy/","title":"Upload a mock policy to S3 bucket","tags":[],"description":"","content":"In this step, we will proceed to upload a mock policy which will support for our chatbot.\nFirst go and download the policy here Go to Amazon S3 console Choose General Purpose then name the bucket StorePolicyBucket and keep the other option in default. After successfully create the bucket, click the bucket name. In the Upload interface, drag and drop the pdf file to upload. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/4-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"We will take the following steps to delete the resources we created in this workshop.\nDelete OpenSearch Go to Amazon OpenSearch service management console Click Dashboard. Select Bedrock Knowledge base. Click Delete Input \u0026ldquo;confirm\u0026rdquo; to delete Delete chatbot Go to Amazon Lex service management console Click Bots. Check the bot. Click Action. Choose Delete Confirm delete. Delete Identity pool Go to Amazon Lex service management console Click on Identity pools. Check the indentity pool then click Delete Enter the identity pool\u0026rsquo;s name to confirm delete Delete Knowledge Base Go to Amazon Bedrock console Click Knowledge Bases. Check the knowledge base Click Delete. Confirm delete. Delete S3 bucket Go to Amazon S3 console Choose the policy bucket. Click Delete. Confirm delete. "},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://phtsom.github.io/Workshop_ChatbotLex/tags/","title":"Tags","tags":[],"description":"","content":""}]